import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["component", "children", "variant", "color", "size"];
import * as React from 'react';
import PropTypes from 'prop-types';
import { unstable_capitalize as capitalize } from '@mui/utils';
import { unstable_composeClasses as composeClasses } from '@mui/base';
import { useTabsList } from '@mui/base/TabsListUnstyled';
import { useSlotProps } from '@mui/base/utils';
import { useThemeProps } from '../styles';
import styled from '../styles/styled';
import { ListRoot } from '../List/List';
import RowListContext from '../List/RowListContext';
import SizeTabsContext from '../Tabs/SizeTabsContext';
import { getTabListUtilityClass } from './tabListClasses';
import { jsx as _jsx } from "react/jsx-runtime";

const useUtilityClasses = ownerState => {
  const {
    orientation,
    size,
    variant,
    color
  } = ownerState;
  const slots = {
    root: ['root', orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getTabListUtilityClass, {});
};

const TabListRoot = styled(ListRoot, {
  name: 'JoyTabList',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})({
  '--List-gap': 'var(--Tabs-gap)',
  '--List-padding': 'var(--Tabs-gap)',
  '--List-divider-gap': '0px',
  flexGrow: 'initial'
});
const TabList = /*#__PURE__*/React.forwardRef(function TabList(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: 'JoyTabList'
  });
  const tabsSize = React.useContext(SizeTabsContext);

  const {
    component = 'div',
    variant = 'soft',
    color = 'neutral',
    size: sizeProp
  } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded);

  const {
    isRtl,
    orientation,
    getRootProps,
    processChildren
  } = useTabsList(_extends({}, props, {
    ref
  }));
  const row = orientation === 'horizontal';
  const size = sizeProp != null ? sizeProp : tabsSize;

  const ownerState = _extends({}, props, {
    isRtl,
    orientation,
    variant,
    color,
    size,
    row,
    nesting: false,
    scoped: true
  });

  const classes = useUtilityClasses(ownerState);
  const tabsListRootProps = useSlotProps({
    elementType: TabListRoot,
    getSlotProps: getRootProps,
    externalSlotProps: {},
    externalForwardedProps: other,
    additionalProps: {
      as: component
    },
    ownerState,
    className: classes.root
  });
  const processedChildren = processChildren();
  return /*#__PURE__*/_jsx(RowListContext.Provider, {
    value: row,
    children: /*#__PURE__*/_jsx(TabListRoot, _extends({}, tabsListRootProps, {
      children: React.Children.map(processedChildren, (child, index) => /*#__PURE__*/React.isValidElement(child) ? /*#__PURE__*/React.cloneElement(child, _extends({}, index === 0 && {
        'data-first-child': ''
      })) : child)
    }))
  });
});
process.env.NODE_ENV !== "production" ? TabList.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------

  /**
   * Used to render icon or text elements inside the TabList if `src` is not set.
   * This can be an element, or just a string.
   */
  children: PropTypes.node,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: PropTypes
  /* @typescript-to-proptypes-ignore */
  .oneOfType([PropTypes.oneOf(['danger', 'info', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),

  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,

  /**
   * The size of the component.
   */
  size: PropTypes
  /* @typescript-to-proptypes-ignore */
  .oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),

  /**
   * The variant to use.
   * @default 'soft'
   */
  variant: PropTypes
  /* @typescript-to-proptypes-ignore */
  .oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])
} : void 0;
export default TabList;